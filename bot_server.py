import os
import json
from flask import Flask, request
from datetime import datetime
import requests

app = Flask(__name__)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
SECRET_CODE = os.getenv("BOT_SECRET_CODE")  # –∑–∞—Ö–∏—Å—Ç –≤—ñ–¥ —Å–ø–∞–º—É

PRODUCTS_FILE = "products.json"
LAST_CHECK_FILE = "last_check.txt"

TELEGRAM_API = f"https://api.telegram.org/bot{TOKEN}"


# === –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
def send_message(chat_id, text):
    """–ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram."""
    requests.post(f"{TELEGRAM_API}/sendMessage", json={"chat_id": chat_id, "text": text})


def load_products():
    try:
        with open(PRODUCTS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return []


def save_products(products):
    with open(PRODUCTS_FILE, "w", encoding="utf-8") as f:
        json.dump(products, f, indent=2, ensure_ascii=False)


def get_last_check():
    """–ó—á–∏—Ç—É—î —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∑ last_check.txt."""
    if not os.path.exists(LAST_CHECK_FILE):
        return "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤—ñ–¥—Å—É—Ç–Ω—è."
    with open(LAST_CHECK_FILE, "r", encoding="utf-8") as f:
        return f.read().strip()


# === –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å ===
@app.route("/", methods=["POST"])
def webhook():
    data = request.get_json()

    if "message" not in data:
        return "ok"

    msg = data["message"]
    chat_id = msg["chat"]["id"]
    text = msg.get("text", "").strip()

    if not text:
        return "ok"

    # --- /list ---
    if text.startswith("/list"):
        products = load_products()
        if not products:
            send_message(chat_id, "üì≠ –ù–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.")
        else:
            message = "üì¶ *–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è:*\n\n"
            for p in products:
                status = "üîî" if p.get("notified") else "üîï"
                message += f"{status} {p['title']}\n{p['url']}\n\n"
            send_message(chat_id, message)

    # --- /add ---
    elif text.startswith("/add"):
        parts = text.split(" ", 3)
        if len(parts) < 4:
            send_message(chat_id, "‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥–∏:\n`/add –ù–∞–∑–≤–∞ URL –°–ï–ö–†–ï–¢–ù–ò–ô_–ö–û–î`")
            return "ok"

        _, title, url, code = parts

        if code != SECRET_CODE:
            send_message(chat_id, "üö´ –ù–µ–≤—ñ—Ä–Ω–∏–π —Å–µ–∫—Ä–µ—Ç–Ω–∏–π –∫–æ–¥.")
            return "ok"

        products = load_products()
        if any(p["url"] == url for p in products):
            send_message(chat_id, "‚ö†Ô∏è –¶–µ–π —Ç–æ–≤–∞—Ä —É–∂–µ —î –≤ —Å–ø–∏—Å–∫—É.")
            return "ok"

        products.append({
            "title": title,
            "url": url,
            "notified": False
        })
        save_products(products)
        send_message(chat_id, f"‚úÖ –¢–æ–≤–∞—Ä *{title}* –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è.")

    # --- /last ---
    elif text.startswith("/last"):
        last_check = get_last_check()
        send_message(chat_id, f"üïì –û—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–∞:\n{last_check}")

    # --- /help ---
    elif text.startswith("/help"):
        help_text = (
            "ü§ñ *–ö–æ–º–∞–Ω–¥–∏ –±–æ—Ç–∞:*\n"
            "/list ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤\n"
            "/add –ù–∞–∑–≤–∞ URL –°–ï–ö–†–ï–¢–ù–ò–ô_–ö–û–î ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π —Ç–æ–≤–∞—Ä\n"
            "/last ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –∫–æ–ª–∏ –±—É–ª–∞ –æ—Å—Ç–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞\n"
        )
        send_message(chat_id, help_text)

    else:
        send_message(chat_id, "‚ùî –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥.")

    return "ok"


@app.route("/", methods=["GET"])
def home():
    return "‚úÖ Bot is running."


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=8080)
