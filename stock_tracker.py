import aiohttp
import asyncio
import json
import logging
from bs4 import BeautifulSoup
from urllib.parse import urlparse
from telegram import Bot
import os

# ---- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ----
logging.basicConfig(
    filename='stock_tracker.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# ---- –†–æ–±–æ—Ç–∞ –∑ —Ñ–∞–π–ª–∞–º–∏ ----
def load_json(filename):
    try:
        with open(filename, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        logging.warning(f"{filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
        return None
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ {filename}: {e}")
        return None


def save_json(filename, data):
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ {filename}: {e}")


# ---- HTTP-–∑–∞–ø–∏—Ç ----
async def fetch_page(session, url):
    try:
        headers = {'User-Agent': 'Mozilla/5.0'}
        async with session.get(url, headers=headers, timeout=10) as resp:
            if resp.status == 200:
                return await resp.text()
            else:
                logging.warning(f"–°—Ç–∞—Ç—É—Å {resp.status} –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ {url}")
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ {url}: {e}")
    return None


# ---- –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ ----
def check_availability(html, url, product, config):
    domain = urlparse(url).netloc
    store_config = next((s for s in config['stores'].values() if domain in s['base_url']), None)
    if not store_config:
        logging.warning(f"–ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥–ª—è {domain} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
        return None

    soup = BeautifulSoup(html, 'html.parser')
    title_elem = soup.select_one(store_config['title_selector'])
    title = title_elem.text.strip() if title_elem else product.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∏')

    buy_btn = soup.select_one(store_config['buy_button_selector'])
    status = "–ù–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"
    if buy_btn and buy_btn.text.strip() == store_config['buy_button_text']:
        status = "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ"

    return {"url": url, "title": title, "status": status}


# ---- Telegram ----
def load_telegram_config():
    """–ü–æ–≤–µ—Ä—Ç–∞—î Telegram-–∫–æ–Ω—Ñ—ñ–≥ –∑ —Ñ–∞–π–ª—É –∞–±–æ –∑ environment."""
    token = os.getenv("TELEGRAM_TOKEN")
    chat_id = os.getenv("TELEGRAM_CHAT_ID")

    if token and chat_id:
        logging.info("Telegram-–∫–æ–Ω—Ñ—ñ–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ environment")
        return {"token": token, "chat_id": chat_id}

    # fallback: –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª
    cfg = load_json("telegram_config.json")
    if cfg and "token" in cfg and "chat_id" in cfg:
        logging.info("Telegram-–∫–æ–Ω—Ñ—ñ–≥ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ telegram_config.json")
        return cfg

    logging.error("Telegram-–∫–æ–Ω—Ñ—ñ–≥ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    return None


async def send_telegram(product, telegram_config):
    try:
        bot = Bot(token=telegram_config['token'])
        message = f"üü¢ –¢–æ–≤–∞—Ä –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ!\n{product['title']}\n{product['url']}"
        await bot.send_message(chat_id=telegram_config['chat_id'], text=message)
        logging.info(f"–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ Telegram –¥–ª—è {product['title']}")
        return True
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ Telegram –¥–ª—è {product['title']}: {e}")
        return False


# ---- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ ----
async def check_products_once(config, products, telegram_config):
    async with aiohttp.ClientSession() as session:
        tasks = [fetch_page(session, p['url']) for p in products]
        pages = await asyncio.gather(*tasks)

    updated = False
    for product, html in zip(products, pages):
        if not html:
            continue
        result = check_availability(html, product['url'], product, config)
        if not result:
            continue

        if result['status'] == "–í –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ":
            if not product.get('notified', False):
                if await send_telegram(product, telegram_config):
                    product['notified'] = True
                    updated = True
        else:
            if product.get('notified', False):
                product['notified'] = False
                updated = True

    if updated:
        save_json('products.json', products)
        logging.info("–û–Ω–æ–≤–ª–µ–Ω–æ products.json")


# ---- –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ----
async def main():
    config = load_json('config.json')
    products = load_json('products.json')
    telegram_config = load_telegram_config()

    if not all([config, products, telegram_config]):
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó. –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏.")
        return

    check_interval = config.get('check_interval', 1200)  # 20 —Ö–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    run_once = os.getenv("RUN_ONCE", "false").lower() == "true"

    while True:
        logging.info("üîç –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–æ–≤–∞—Ä—ñ–≤")
        await check_products_once(config, products, telegram_config)
        logging.info("‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        if run_once:
            break  # GitHub —Ä–µ–∂–∏–º ‚Äî –æ–¥–∏–Ω –ø—Ä–æ—Ö—ñ–¥

        logging.info(f"–û—á—ñ–∫—É–≤–∞–Ω–Ω—è {check_interval} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é...")
        await asyncio.sleep(check_interval)


if __name__ == "__main__":
    asyncio.run(main())
